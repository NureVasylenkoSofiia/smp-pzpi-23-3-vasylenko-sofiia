Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра Програмної інженерії



Звіт
З практичної роботи №1
з дисципліни «Скриптові мови програмування»









Виконала									     Перевірив
ст.гр ПЗПІ-23-3							ст. в. Сокорчук І.П.
Василенко С.О.





Харків 2025
1 ІСТОРІЯ ЗМІН
№	Дата	Версія звіту	Опис змін та виправлень
1	08.06.2025	       0.1	Повна реалізація звіту 
















 
2 ЗАВДАННЯ
2.1 Постановка завдання
Написатати Bash скрипт, який друкуватиме на екрані ялинку із
двох ярусів гілок, стовбура та шару снігу. 
2.2 Вимоги до скрипта
-	Ялинка повинна бути симетричною
-	Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#»
-	Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу
-	Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі
-	Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску
-	Параметри скрипта повинні мати додатнє значення
-	Вказані значення повинні округлятися до потрібних у меншу сторону
-	Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо,
скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента
і повернути відповідний результат у батьківський процес
-	Файл скрипта повинен бути виконуваним файлом для усіх користуачів системи
-	Право редагувати файл скрипта повинен мати лише власник скрипта

3 ОПИС ВИКОНАНОЇ РОБОТИ 
3.1	Хід роботи
Скрипт приймає два аргументи: висоту (height) та ширину снігу (snow_width). На початку виконуються перевірки:
-	Чи передано рівно два аргументи. Якщо ні — виводиться помилка і скрипт завершується
-	Чи обидва аргументи — додатні цілі числа. Інакше — помилка
-	Чи висота не менша за 11 рядків. Якщо менше — помилка
-	Чи ширина снігу не менша за 9 та є непарною. Якщо ні — помилка
 1 #!/bin/bash
 2 
 3 if [ $# -ne 2 ]; then
 4     echo "ПОМИЛКА: Скрипт потребує два аргументи: висота і ширина снігу." >&2
 5     exit 1
 6 fi
 7 
 8 height=$1
 9 snow_width=$2
10 
11 re='^[0-9]+$'
12 if ! [[ $height =~ $re ]] || ! [[ $snow_width =~ $re ]] || [ "$height" -le 0 ] || [ "$snow_width" -le 0 ]; then
13     echo "ПОМИЛКА: Аргументи повинні бути додатніми цілими числами." >&2
14     exit 1
15 fi
16 
17 min_total=11
18 if [ "$height" -lt "$min_total" ]; then
19     echo "ПОМИЛКА: Висота повинна бути щонайменше $min_total рядків." >&2
20     exit 1
21 fi
22 
23 if [ "$snow_width" -lt 9 ] || [ $((snow_width % 2)) -eq 0 ]; then
24     echo "ПОМИЛКА: Ширина снігу має бути непарним числом ≥ 9." >&2
25     exit 1
26 fi
27 
28 echo "OK: Висота=$height, Ширина снігу=$snow_width"
Фрагмент коду нижче відповідає за побудову ASCII-ялинки: функція print_branch_layer виводить два верхні яруси ялинки, де символи * і # чергуються по черзі й центровано вирівнюються; далі створюється стовбур із трьох рядків ###, також вирівняний по центру, а в кінці додається основа з рядка символів * по всій ширині снігу.

30 print_branch_layer() {
31     local width=$1
32     local start_char=$2
33     local line_width=1
34     local count=0
35 
36     until [ "$line_width" -gt "$width" ]; do
37         local spaces=$(( (snow_width - line_width) / 2 ))
38         printf "%*s" "$spaces" ""
39         for ((i=0; i<line_width; i++)); do
40             if [ $((i % 2)) -eq 0 ]; then
41                 printf "%s" "$start_char"
42             else
43                 printf "%s" "$([[ "$start_char" == "*" ]] && echo "#" || echo "*")"
44             fi
45         done
46         echo
47         line_width=$((line_width + 2))
48         count=$((count + 1))
49     done
50 }
51 
52 branch_width=$((snow_width - 2))
53 print_branch_layer "$branch_width" "*"
54 print_branch_layer "$branch_width" "#"
55 
56 for i in {1..3}; do
57     spaces=$(( (snow_width - 3) / 2 ))
58     printf "%*s###\n" "$spaces" ""
59 done
60 
61 for ((i=0; i<snow_width; i++)); do
62     printf "*"
63 done
64 echo

Цей код забезпечує графічне представлення ялинки в терміналі, яке залежить від переданих користувачем параметрів висота і ширина снігу. Основна мета — демонстрація роботи з циклами, умовами, параметрами функцій і форматованим виводом у Bash.
ВИСНОВКИ
У ході виконання скрипту було засвоєно базові принципи програмування на мові Bash. Реалізовано роботу з аргументами командного рядка, перевірку вхідних даних та побудову символьної фігури з використанням циклів і умов. Отримано практичний досвід форматованого виведення та динамічного створення багаторівневої структури ASCII-ялинки. Здобуті навички можуть бути застосовані для автоматизації виводу текстових шаблонів і перевірки введення у Bash-середовищі.
 
ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/aO9I3Q6rD2M
Хронологічний опис відеозапису:
00:00 – Представлення
00:15 – Опис завдання
01:36 – Тестування 
02:30 – Розбір коду
 
ДОДАТОК В
Програмний код

 1 #!/bin/bash
 2 
 3 if [ $# -ne 2 ]; then
 4     echo "ПОМИЛКА: Скрипт потребує два аргументи: висота і ширина снігу." >&2
 5     exit 1
 6 fi
 7 
 8 height=$1
 9 snow_width=$2
10 
11 re='^[0-9]+$'
12 if ! [[ $height =~ $re ]] || ! [[ $snow_width =~ $re ]] || [ "$height" -le 0 ] || [ "$snow_width" -le 0 ]; then
13     echo "ПОМИЛКА: Аргументи повинні бути додатніми цілими числами." >&2
14     exit 1
15 fi
16 
17 min_total=11
18 if [ "$height" -lt "$min_total" ]; then
19     echo "ПОМИЛКА: Висота повинна бути щонайменше $min_total рядків." >&2
20     exit 1
21 fi
22 
23 if [ "$snow_width" -lt 9 ] || [ $((snow_width % 2)) -eq 0 ]; then
24     echo "ПОМИЛКА: Ширина снігу має бути непарним числом ≥ 9." >&2
25     exit 1
26 fi
27 
28 echo "OK: Висота=$height, Ширина снігу=$snow_width"
29 
30 print_branch_layer() {
31     local width=$1
32     local start_char=$2
33     local line_width=1
34     local count=0
35 
36     until [ "$line_width" -gt "$width" ]; do
37         local spaces=$(( (snow_width - line_width) / 2 ))
38         printf "%*s" "$spaces" ""
39         for ((i=0; i<line_width; i++)); do
40             if [ $((i % 2)) -eq 0 ]; then
41                 printf "%s" "$start_char"
42             else
43                 printf "%s" "$([[ "$start_char" == "*" ]] && echo "#" || echo "*")"
44             fi
45         done
46         echo
47         line_width=$((line_width + 2))
48         count=$((count + 1))
49     done
50 }
51 
52 branch_width=$((snow_width - 2))
53 print_branch_layer "$branch_width" "*"
54 print_branch_layer "$branch_width" "#"
55 
56 for i in {1..3}; do
57     spaces=$(( (snow_width - 3) / 2 ))
58     printf "%*s###\n" "$spaces" ""
59 done
60 
61 for ((i=0; i<snow_width; i++)); do
62     printf "*"
63 done
64 echo



