Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра Програмної інженерії



Звіт
З лабораторної роботи №4
з дисципліни «Скриптові мови програмування»









Виконала									     Перевірив
ст.гр ПЗПІ-23-3							ст. в. Сокорчук І.П.
Василенко С.О.





Харків 2025
1 ІСТОРІЯ ЗМІН
№	Дата	Версія звіту	Опис змін та виправлень
1	08.06.2025	       0.1	Повна реалізація звіту 
















 
2 ЗАВДАННЯ
2.1 Постановка завдання
Використовуючи матеріал попередніх лабораторних робіт, потрібно додати такий функціонал: 
1. Прибрати дублювання шапки і підвалу сайту (якщо воно є). 
2. Додати сторінку логіна. Обмежити доступ до сайту не залогіненим користувачам. 
3. Додати сторінку профілю з можливістю завантажити фото.
2.2 Вимоги до скрипта
Вимоги до веб-застосунку, які потрібні для коректної роботи всіх функцій та скриптів:
2.2.1 Система авторизації:
-	Наявність сторінки логіну з формою для введення логіну та паролю
-	Зберігання даних користувача в файлі credential.php
-	Використання сесій для зберігання інформації про авторизованого користувача
-	Відображення пункту меню "Login" для неавторизованих користувачів
-	Відображення пункту меню "Logout" для авторизованих користувачів
-	Можливість виходу з системи (очищення сесії)
2.2.2 Обмеження доступу:
-	Блокування доступу до контенту для неавторизованих користувачів
-	Перенаправлення на сторінку 404 з повідомленням про необхідність авторизації
-	Відображення сторінки логіну при спробі доступу до захищених сторінок
2.2.3 Профіль користувача:
-	Можливість перегляду та редагування інформації про користувача
-	Форма з полями для введення: ім'я, прізвище, дата народження, стисла інформація про користувача, фото користувача
-	Валідація даних: перевірка на порожні поля, ім'я та прізвище - рядок довжиною більше 1 символу, вік користувача не менше 16 років, стисла інформація - не менше 50 символів, перевірка типу та наявності завантаженого фото
 
3 ОПИС ВИКОНАНОЇ РОБОТИ 
3.1 Хід роботи
Під час виконання лабораторної роботи №4 ми будемо удосконалювати код, написаний під час лабораторної роботи №3. Ми додамо сторінку логіна, обмежимо доступ до сайту не залогіненим користувачам, і також додамо сторінку профілю з можливістю завантажити фото.
	Реалізовано механізм авторизації користувача через окрему сторінку.
1  <?php
 2  $credentials = include 'credential.php';
 3  $error = '';
 4  
 5  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
 6      $login = $_POST['login'] ?? '';
 7      $password = $_POST['password'] ?? '';
 8  
 9      if (isset($credentials[$login]) && $credentials[$login] === $password) {
10          $_SESSION['login'] = $login;
11          header('Location: main.php?page=profile');
12          exit;
13      } else {
14          $error = "Невірний логін або пароль.";
15      }
16  }
17  ?>
18  
19  <h2>Вхід</h2>
20  <?php if ($error): ?>
21      <p style="color:red;"><?= $error ?></p>
22  <?php endif; ?>
23  <form method="POST">
24      <label>Логін: <input type="text" name="login" required></label><br><br>
25      <label>Пароль: <input type="password" name="password" required></label><br><br>
26      <button type="submit" class="button">Увійти</button>
27  </form>

На відміну від попередньої лабораторної роботи, де облікові дані користувача зберігалися у вигляді масиву в окремому файлі, у цій версії була реалізована повноцінна база даних SQLite із таблицею користувачів. Це дозволяє не лише розширити функціональність додатку, а й покращити безпеку зберігання інформації.

1  <?php
 2  $dbFile = __DIR__ . '/vesna.sqlite';
 3  
 4  if (file_exists($dbFile)) {
 5      echo "База вже існує: {$dbFile}\n";
 6      exit;
 7  }
 8  
 9  try {
10      $db = new PDO('sqlite:' . $dbFile);
11      $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
12  
13      $db->exec("
14          CREATE TABLE IF NOT EXISTS products (
15              id INTEGER PRIMARY KEY AUTOINCREMENT,
16              name TEXT NOT NULL,
17              price REAL NOT NULL,
18              image TEXT DEFAULT ''
19          );
20      ");
21  
22      $products = [
23          ['name' => 'Молоко пастеризоване', 'price' => 12, 'image' => 'milk.png'],
24          ['name' => 'Хліб чорний', 'price' => 9, 'image' => 'bread.png'],
25          ['name' => 'Сир білий', 'price' => 21, 'image' => 'cheese.png'],
26          ['name' => 'Сметана 20%', 'price' => 25, 'image' => 'sour-cream.png'],
27          ['name' => 'Кефір 1%', 'price' => 19, 'image' => 'kefir.png'],
28          ['name' => 'Вода газована', 'price' => 18, 'image' => 'water.png'],
29          ['name' => 'Печиво \"Весна\"', 'price' => 14, 'image' => 'cookies.png'],
30      ];
31  
32      $stmt = $db->prepare("INSERT INTO products (name, price, image) VALUES (?, ?, ?)");
33      foreach ($products as $p) {
34          $stmt->execute([$p['name'], $p['price'], $p['image']]);
35      }
36  
37      echo "Базу створено та заповнено: {$dbFile}\n";
38  } catch (PDOException $e) {
39      echo "Помилка: " . $e->getMessage() . "\n";
40  }


Для забезпечення повного виходу з системи було створено окрему сторінку logout.php, яка відповідає за завершення сесії користувача. Цей файл містить виклик функції session_start() для ініціалізації сесії, а також функцій session_unset() і session_destroy(), які, відповідно, очищують змінні сесії та повністю її знищують. Після виконання цих дій користувач автоматично перенаправляється на головну сторінку або сторінку входу. Цей код реалізує повноцінний механізм логауту й дозволяє захистити сторінки сайту від несанкціонованого доступу після виходу. У звіті доцільно подати цей код у розділі, що стосується захисту даних користувача, а також забезпечення повноцінної сесійної роботи.
 1  <?php
 2  session_start();
 3  session_unset();
 4  session_destroy();
 5  header('Location: main.php?page=index');
 6  exit;
Крім цього, було реалізовано перевірку доступу до захищених сторінок. У файлах, що мають бути доступні лише авторизованим користувачам (наприклад, profile.php, cart.php або інші сторінки із приватним контентом), на самому початку додається конструкція session_start(), після чого відбувається перевірка: якщо змінна $_SESSION['username'] не встановлена, користувача перенаправляють на сторінку page404.php. 
1  <h2>Помилка 403: Необхідна авторизація</h2>
 2  <p>Будь ласка, <a href="main.php?page=login">увійдіть</a>, щоб переглянути цю сторінку.</p>
Це дозволяє гарантувати, що всі спроби потрапити на ці сторінки без логіну завершаться помилкою доступу. У звіті цей код можна включити до підрозділу, де описується механізм контролю доступу, а також тестування перенаправлення при несанкціонованому вході.
ВИСНОВКИ
У ході виконання лабораторної роботи було закріплено практичні навички створення вебзастосунків з використанням мови PHP, зокрема реалізації авторизації користувачів за допомогою сесій, бази даних та перевірки прав доступу. Було розроблено функціональні сторінки входу та виходу користувача із системи (login.php та logout.php відповідно), а також забезпечено захист конфіденційних сторінок від несанкціонованого доступу за допомогою перевірки авторизаційної сесійної змінної. У результаті виконання роботи було досягнуто мети лабораторного заняття — створено авторизаційну систему з реєстрацією доступу через базу даних та механізмом сесійного управління, що відповідає вимогам до безпечних вебсистем. Набуті знання можуть бути застосовані під час розробки повноцінних вебсайтів з обмеженим доступом до контенту.


 
ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: 
https://youtu.be/HErmaiTECzo
Хронологічний опис відеозапису:
00:00 – Представлення
00:11 – Опис завдання
01:56 – Тестування 
04:16 – Розбір коду

